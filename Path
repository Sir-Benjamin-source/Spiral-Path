def spiral_path(TD, RF, TW, CIR, SC, AM, DA, iterations=5, sign='+'):
    """
    Compute Spiral Path: (TD / RF) * TW + (CIR * SC) ± (AM * DA)
    Iterates for spiral simulation, with sign as '+' or '-'.
    Returns list of path values.
    """
    path_values = []
    current = 0.0
    for i in range(iterations):
        base = (TD / RF) * TW + (CIR * SC)
        adjustment = (AM * DA) if sign == '+' else -(AM * DA)
        current = base + adjustment
        path_values.append(current)
        # Simple spiral tweak: adjust params slightly for next iter
        TD *= 1.01  # Task density grows
        RF *= 1.005  # Refinement factor
    return path_values

# Sample params from context (assumed values)
TD, RF, TW, CIR, SC, AM, DA = 10.0, 2.0, 5.0, 3.0, 4.0, 1.0, 2.0

# Compute +
positive_path = spiral_path(TD, RF, TW, CIR, SC, AM, DA, sign='+')
print("Positive Spiral Path Values:", positive_path)

# Compute -
negative_path = spiral_path(TD, RF, TW, CIR, SC, AM, DA, sign='-')
print("Negative Spiral Path Values:", negative_path)

# Quick plot for visualization
import matplotlib.pyplot as plt
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.plot(positive_path, label='Positive ±', marker='o')
plt.title('Spiral Path Evolution (+)')
plt.xlabel('Iteration')
plt.ylabel('Path Value')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(negative_path, label='Negative ±', marker='x')
plt.title('Spiral Path Evolution (-)')
plt.xlabel('Iteration')
plt.ylabel('Path Value')
plt.legend()

plt.tight_layout()
plt.savefig('spiral_path_demo.png')
print("Plot saved as spiral_path_demo.png")
